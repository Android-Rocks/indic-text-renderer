1) Install NDK as per the instructions at http://developer.android.com/sdk/ndk/index.html

2)a) Download Freetype from https://github.com/android/platform_external_freetype and extract it to the folder indic-text-android-full\jni\freetype.
Contents of indic-text-android-full\jni\freetype should look as below:
-builds
-include
-src
-Android.mk
..

2)b) Download HarfBuzz from http://anongit.freedesktop.org/git/harfbuzz.git into the folder indic-text-android-full\jni\harfbuzz-ng.
Contents of indic-text-android-full\jni\harfbuzz-ng should look as below:
-src
-test
-util
-Android.mk
..

3) Build harfbuzz-ng (http://wiki.smc.org.in/HarfbuzzTesting) :
(This is to generate "jni/harfbuzz-ng/src/hb-version.h" and other required header files)
You need to install ragel, autoconf, libtool and cairo-devel to build the harfbuzz library on your system. Use your operating system's package manager to install ragel, autoconf, libtool and cairo-devel.

Open CygWin Bash Shell and run the following commands (make sure values specified below correspond to correct directory paths on your machine):
	a) export NDK_PROJECT_PATH=/cygdrive/c/indic-text-renderer/
	b) cd $NDK_PROJECT_PATH/jni/harfbuzz-ng
	c) ./autogen.sh
	d) make 

Note:
i) When running ./autogen.sh on Windows using CygWin Bash shell, you might hit an error as below:
	./autogen.sh: line 3: $'\r': command not found
	./autogen.sh: line 6: $'\r': command not found
	: No such file or directory
If so, then run the following command to convert autogen.sh file to Unix line ending format, and run "./autogen.sh" again. 
	dos2unix.exe autogen.sh

ii) The second run of ./autogen.sh will create a shell script by name "configure", and then run "./configure".
When running "./configure", you might an error as below:
	...
	checking for windows.h... yes
	configure: creating ./config.status
	.in'ig.status: error: cannot find input file: `
If yes, then run the following command to convert "configure" shell script to Unix line ending format, and run "./configure" again. 
	dos2unix.exe -f configure

iii) When running "make", after it builds the files in "jni/harfbuzz-ng/src" directory, 
it will try to build files in "jni/harfbuzz-ng/util" directory and, might fail with an error as below.
You can safely ignore these errors and continue with the next step.

make[2]: Leaving directory `/cygdrive/c/indic-text-renderer/jni/harfbuzz-ng/src'
Making all in util
make[2]: Entering directory `/cygdrive/c/indic-text-renderer/jni/harfbuzz-ng/util'
  CXX    options.o
options.cc: In member function `hb_font_t* font_options_t::get_font() const':
options.cc:528: error: `_setmode' was not declared in this scope
options.cc: In member function `FILE* output_options_t::get_file_handle()':
options.cc:672: error: `_setmode' was not declared in this scope
make[2]: *** [options.o] Error 1

4) Run ndk-build as below to create the native libraries.
	a) export NDK=/cygdrive/c/android-ndk-r8/
	b) cd $NDK_PROJECT_PATH
	c) $NDK/ndk-build

5) Copy "Lohit-Kannada.ttf" font file to "/sdcard/Android/data/org.iisc.mile.indictext.android/" folder on your phone/emulator.
a) Switch to DDMS perspective in Eclipse (Window -> Open Perspective -> Other... -> DDMS).
b) Under "Devices" view, select your phone/emulator.
c) Under "File Explorer" view, expand and select "sdcard -> Android -> data".
d) Click "+" icon to create a "New Folder"
e) Enter folder name as "org.iisc.mile.indictext.android" and click "OK".
f) Drag and drop "Lohit-Kannada.ttf" file from "tts\indic-text-android-full\assets" onto the "/sdcard/Android/data/org.iisc.mile.indictext.android/" folder in DDMS perspective.

(If your emulator wasn't created with an SD Card, you can add it as below:
a) Close emulator if it is already running.
b) Open "Android SDK and AVD Manager".
c) Select your emulator and click "Edit"
d) Under "SD Card -> Size" specify a size for your SD card, say "1024 MiB".
e) Click "Edit AVD" to save changes.
f) Start your emulator and follow the steps above to copy the font file to the expected location.)

6) Switch back to Java perspective and run "indic-text-android-full" on your Android phone/emulator.